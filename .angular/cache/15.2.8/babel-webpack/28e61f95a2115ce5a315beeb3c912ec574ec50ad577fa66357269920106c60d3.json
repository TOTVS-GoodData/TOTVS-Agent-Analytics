{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataBaseAddComponent = void 0;\nconst core_1 = require(\"@angular/core\");\nconst interfaces_1 = require(\"../utilities/interfaces\");\nconst database_messages_1 = require(\"../database/database-messages\");\nconst _constants = require(\"../utilities/constants-angular\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"../workspace/workspace-service\");\nconst i2 = require(\"../database/database-service\");\nconst i3 = require(\"ngx-electronyzer\");\nconst i4 = require(\"../utilities/utilities\");\nconst i5 = require(\"@angular/router\");\nconst i6 = require(\"@angular/common\");\nconst i7 = require(\"@angular/forms\");\nconst i8 = require(\"@po-ui/ng-components\");\nfunction DataBaseAddComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"po-select\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_ng_template_11_Template_po_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.database.ipType = $event);\n    })(\"p-change\", function DataBaseAddComponent_ng_template_11_Template_po_select_p_change_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateIpRegexPattern());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"po-input\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_ng_template_11_Template_po_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.database.ip = $event);\n    })(\"p-change\", function DataBaseAddComponent_ng_template_11_Template_po_input_p_change_2_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateConnectionString());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"po-input\", 19);\n    i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_ng_template_11_Template_po_input_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.database.port = $event);\n    })(\"p-change\", function DataBaseAddComponent_ng_template_11_Template_po_input_p_change_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.updateConnectionString());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"po-input\", 20);\n    i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_ng_template_11_Template_po_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.schema = $event);\n    })(\"p-change\", function DataBaseAddComponent_ng_template_11_Template_po_input_p_change_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.setDatabaseSchema($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"p-label\", ctx_r1.lbl_ipType)(\"ngModel\", ctx_r1.database.ipType)(\"p-options\", ctx_r1._CNST_DATABASE_IPTYPES);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"p-label\", ctx_r1.lbl_ip)(\"ngModel\", ctx_r1.database.ip)(\"p-pattern\", ctx_r1.regexPattern);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"p-label\", ctx_r1.lbl_port)(\"ngModel\", ctx_r1.database.port)(\"p-pattern\", ctx_r1._CNST_DATABASE_PORT_REGEX);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"p-label\", ctx_r1.lbl_schema)(\"ngModel\", ctx_r1.schema);\n  }\n}\nfunction DataBaseAddComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"po-input\", 21);\n    i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_ng_template_12_Template_po_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.database.instance = $event);\n    })(\"p-change\", function DataBaseAddComponent_ng_template_12_Template_po_input_p_change_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.updateConnectionString());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"p-label\", ctx_r2.lbl_instance)(\"ngModel\", ctx_r2.database.instance);\n  }\n}\nconst CNST_FIELD_NAMES = [{\n  key: 'name',\n  value: 'Nome da configuração*'\n}, {\n  key: 'type',\n  value: 'Tipo de banco de dados*'\n}, {\n  key: 'driverClass',\n  value: 'Driver*'\n}, {\n  key: 'driverPath',\n  value: 'Caminho do driver*'\n}, {\n  key: 'ip',\n  value: 'Endereço IP*'\n}, {\n  key: 'ipType',\n  value: 'Tipo*'\n}, {\n  key: 'port',\n  value: 'Porta*'\n}, {\n  key: 'schema',\n  value: 'Schema / SID*'\n}, {\n  key: 'instance',\n  value: 'Instância do banco de dados'\n}, {\n  key: 'connectionString',\n  value: 'String de conexão final*'\n}, {\n  key: 'username',\n  value: 'Usuário*'\n}, {\n  key: 'password',\n  value: 'Senha*'\n}];\nlet DataBaseAddComponent = /*#__PURE__*/(() => {\n  class DataBaseAddComponent {\n    constructor(_workspaceService, _databaseService, _electronService, _utilities, _router) {\n      this._workspaceService = _workspaceService;\n      this._databaseService = _databaseService;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._router = _router;\n      this.modal = false;\n      this.databaseObject = null;\n      this.closeModal = new core_1.EventEmitter();\n      this.CNST_MESSAGES = {\n        DATABASE_VALIDATE: 'Validando informações do banco de dados...',\n        DATABASE_INVALID_IP: 'Endereço IP inválido. Verifique o tipo informado (ipv4 / ipv6 / hostname) e se o preenchimento está correto.',\n        DATABASE_INVALID_PORT: 'Porta do banco de dados inválida. Verifique se a porta está no range permitido (1024 - 65536).',\n        DATABASE_PASSWORD_ENCRYPT: 'Criptografando senhas...'\n      };\n      this.po_lo_text = {\n        value: null\n      };\n      this.database = new interfaces_1.Database();\n      this.schema = null;\n      this.editPassword = null;\n      this.regexPattern = null;\n      this._CNST_FIELD_NAMES = CNST_FIELD_NAMES;\n      this.lbl_name = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'name';\n      }).value;\n      this.lbl_type = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'type';\n      }).value;\n      this.lbl_driverClass = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'driverClass';\n      }).value;\n      this.lbl_driverPath = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'driverPath';\n      }).value;\n      this.lbl_ipType = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'ipType';\n      }).value;\n      this.lbl_ip = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'ip';\n      }).value;\n      this.lbl_port = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'port';\n      }).value;\n      this.lbl_schema = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'schema';\n      }).value;\n      this.lbl_instance = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'instance';\n      }).value;\n      this.lbl_connectionString = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'connectionString';\n      }).value;\n      this.lbl_username = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'username';\n      }).value;\n      this.lbl_password = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'password';\n      }).value;\n      this._CNST_DATABASE_PORT_REGEX = _constants.CNST_DATABASE_PORT_REGEX;\n      this._CNST_DATABASE_IPTYPES = _constants.CNST_DATABASE_IPTYPES.map(db => {\n        return {\n          label: db.label,\n          value: db.value\n        };\n      });\n      this._CNST_DATABASE_TYPES = _constants.CNST_DATABASE_TYPES.map(db => {\n        return {\n          label: db.label,\n          value: db.value\n        };\n      });\n      let nav = this._router.getCurrentNavigation();\n      if (nav != undefined && nav.extras.state) {\n        Object.getOwnPropertyNames.call(Object, nav.extras.state).map(p => {\n          this.database[p] = nav.extras.state[p];\n        });\n      }\n      this.regexPattern = this.database.ipType ? _constants.CNST_DATABASE_IPTYPES.find(db => {\n        return db.value == this.database.ipType;\n      }).pattern : null;\n      this.schema = this.database.schema ? this.database.schema : this.database.sid;\n      if (this.database.id != null) {\n        this.operation = 'Alterar Banco de dados';\n        this.editPassword = this.database.password;\n      } else {\n        this.operation = 'Cadastrar Banco de Dados';\n        this.editPassword = null;\n      }\n    }\n    ngOnChanges() {\n      if (this.databaseObject) {\n        this.database = this.databaseObject;\n        this.editPassword = this.database.password;\n        this.operation = 'Alterar Banco de dados';\n      }\n    }\n    onChangeDatabaseType(driver) {\n      this.database.driverClass = _constants.CNST_DATABASE_TYPES.find(db => {\n        return db.value == driver;\n      }).driverClass;\n      this.database.driverPath = _constants.CNST_DATABASE_TYPES.find(db => {\n        return db.value == driver;\n      }).driverPath;\n      this.database.port = _constants.CNST_DATABASE_TYPES.find(db => {\n        return db.value == driver;\n      }).defaultPort;\n      this.setDatabaseSchema(this.database.schema ? this.database.schema : this.database.sid);\n      this.updateConnectionString();\n    }\n    setDatabaseSchema(schema) {\n      switch (this.database.type) {\n        case 'Oracle_SID':\n          this.database.schema = null;\n          this.database.sid = schema;\n          break;\n        default:\n          this.database.schema = schema;\n          this.database.sid = null;\n          break;\n      }\n      this.updateConnectionString();\n    }\n    updateIpRegexPattern() {\n      this.regexPattern = _constants.CNST_DATABASE_IPTYPES.find(db => {\n        return db.value == this.database.ipType;\n      }).pattern;\n    }\n    updateConnectionString() {\n      let driverConnectionString = _constants.CNST_DATABASE_TYPES.find(db => {\n        return db.value == this.database.type;\n      }).driverConnectionString;\n      this.database.ip = this.database.ip == null ? null : this.database.ip.replace(/\\s+/g, '');\n      this.database.port = this.database.port == null ? null : this.database.port.replace(/\\s+/g, '');\n      this.database.schema = this.database.schema == null ? null : this.database.schema.replace(/\\s+/g, '');\n      this.database.sid = this.database.sid == null ? null : this.database.sid.replace(/\\s+/g, '');\n      this.database.instance = this.database.instance == null ? null : this.database.instance.replace(/\\s+/g, '');\n      if (this.database.ip == '') {\n        this.database.ip = null;\n      }\n      if (this.database.port == '') {\n        this.database.port = null;\n      }\n      if (this.database.schema == '') {\n        this.database.schema = null;\n      }\n      if (this.database.sid == '') {\n        this.database.sid = null;\n      }\n      if (this.database.instance == '') {\n        this.database.instance = null;\n      }\n      switch (this.database.type) {\n        case 'SQL_Server':\n          this.database.connectionString = driverConnectionString + (this.database.ip == null ? '<ENDERECO_IP>' : this.database.ip) + (this.database.port == null ? ':<PORTA>' : ':' + this.database.port) + (this.database.instance == null ? '' : ';InstanceName=' + this.database.instance) + (this.database.schema == null ? ';DatabaseName=<SCHEMA>' : ';DatabaseName=' + this.database.schema);\n          break;\n        case 'Oracle_ServiceName':\n          this.database.connectionString = driverConnectionString + (this.database.ip == null ? '<ENDERECO_IP>' : this.database.ip) + (this.database.port == null ? ':<PORTA>' : ':' + this.database.port) + (this.database.schema == null ? '/<SCHEMA>' : '/' + this.database.schema);\n          break;\n        case 'Oracle_SID':\n          this.database.connectionString = driverConnectionString + (this.database.ip == null ? '<ENDERECO_IP>' : this.database.ip) + (this.database.port == null ? ':<PORTA>' : ':' + this.database.port) + (this.database.sid == null ? ':<SID>' : ':' + this.database.sid);\n          break;\n        case 'Progress':\n          this.database.connectionString = driverConnectionString + (this.database.ip == null ? '<ENDERECO_IP>' : this.database.ip) + (this.database.port == null ? ':<PORTA>' : ':' + this.database.port) + (this.database.schema == null ? ';DatabaseName=<SCHEMA>' : ';DatabaseName=' + this.database.schema);\n          break;\n        case 'Informix':\n          this.database.connectionString = driverConnectionString + (this.database.ip == null ? '<ENDERECO_IP>' : this.database.ip) + (this.database.port == null ? ':<PORTA>' : ':' + this.database.port) + (this.database.schema == null ? '/<SCHEMA>' : '/' + this.database.schema);\n          break;\n      }\n    }\n    goBack(newDatabase) {\n      if (this.modal) {\n        this.closeModal.emit(newDatabase);\n      } else {\n        this._router.navigate(['/database']);\n      }\n    }\n    saveDatabase() {\n      if (this.validateDatabase()) {\n        if (this._electronService.isElectronApp && this.editPassword != this.database.password) {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, this.CNST_MESSAGES.DATABASE_PASSWORD_ENCRYPT);\n          this.po_lo_text = {\n            value: this.CNST_MESSAGES.DATABASE_PASSWORD_ENCRYPT\n          };\n          this.database.password = this._electronService.ipcRenderer.sendSync('encrypt', this.database.password);\n        }\n        this.po_lo_text = {\n          value: database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE\n        };\n        this._databaseService.saveDatabase(this.database).subscribe(b => {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.INFO, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE_OK);\n          this.po_lo_text = {\n            value: null\n          };\n          this.goBack(this.database);\n        }, err => {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_DELETE_ERROR, err);\n          this.po_lo_text = {\n            value: null\n          };\n        });\n      }\n      //}, (err: any) => {\n      //  this.po_lo_text = { value: null };\n      //  this._utilities.createNotification('ERR', CNST_MESSAGES.DATABASE_DELETE_ERROR, err);\n    }\n\n    validateDatabase() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, this.CNST_MESSAGES.DATABASE_VALIDATE);\n      this.po_lo_text = {\n        value: this.CNST_MESSAGES.DATABASE_VALIDATE\n      };\n      let db = new interfaces_1.Database();\n      let password = null;\n      switch (this.database.type) {\n        case 'SQL_Server':\n          delete db.sid;\n          break;\n        case 'Oracle_ServiceName':\n          delete db.sid;\n          delete db.instance;\n          break;\n        case 'Oracle_SID':\n          delete db.schema;\n          delete db.instance;\n          break;\n        case 'Progress':\n          delete db.sid;\n          delete db.instance;\n          break;\n        case 'Informix':\n          delete db.sid;\n          delete db.instance;\n          break;\n      }\n      let propertiesNotDefined = Object.getOwnPropertyNames.call(Object, db).map(p => {\n        if (this.database[p] == undefined && p != 'id') return p;\n      }).filter(p => {\n        return p != null;\n      });\n      // Validação dos campos de formulário //\n      if (propertiesNotDefined.length > 0) {\n        this.po_lo_text = {\n          value: null\n        };\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, 'Campo obrigatório \"' + this._CNST_FIELD_NAMES.find(f => {\n          return f.key === propertiesNotDefined[0];\n        }).value + '\" não preenchido.');\n        return false;\n      } else {\n        let regexIp = new RegExp(this.regexPattern);\n        let regexPort = new RegExp(this._CNST_DATABASE_PORT_REGEX);\n        if (!regexIp.test(this.database.ip)) {\n          this.po_lo_text = {\n            value: null\n          };\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, this.CNST_MESSAGES.DATABASE_INVALID_IP);\n          return false;\n        } else if (!regexPort.test(this.database.port)) {\n          this.po_lo_text = {\n            value: null\n          };\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, this.CNST_MESSAGES.DATABASE_INVALID_PORT);\n          return false;\n        }\n      }\n      // Validação da conexão do banco de dados //\n      return this.testDatabaseConnection();\n    }\n    testDatabaseConnection() {\n      this.po_lo_text = {\n        value: database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOGIN\n      };\n      let decrypt = this.editPassword == this.database.password ? true : false;\n      let b = this._databaseService.testConnection(decrypt, {\n        ...this.database\n      });\n      this.po_lo_text = {\n        value: null\n      };\n      return b;\n    }\n  }\n  DataBaseAddComponent.ɵfac = function DataBaseAddComponent_Factory(t) {\n    return new (t || DataBaseAddComponent)(i0.ɵɵdirectiveInject(i1.WorkspaceService), i0.ɵɵdirectiveInject(i2.DatabaseService), i0.ɵɵdirectiveInject(i3.ElectronService), i0.ɵɵdirectiveInject(i4.Utilities), i0.ɵɵdirectiveInject(i5.Router));\n  };\n  DataBaseAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DataBaseAddComponent,\n    selectors: [[\"app-database-add\"]],\n    inputs: {\n      modal: \"modal\",\n      databaseObject: \"databaseObject\"\n    },\n    outputs: {\n      closeModal: \"closeModal\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 22,\n    vars: 23,\n    consts: [[3, \"p-title\"], [\"p-screen-lock\", \"true\", 3, \"hidden\", \"p-text\"], [\"dataBaseForm\", \"ngForm\"], [1, \"po-row\"], [\"name\", \"po_name\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"p-label\", \"ngModel\", \"ngModelChange\"], [\"name\", \"po_databaseType\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"p-label\", \"ngModel\", \"p-options\", \"ngModelChange\", \"p-change\"], [\"name\", \"po_driverClass\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"p-label\", \"ngModel\", \"p-disabled\", \"ngModelChange\"], [\"name\", \"poDriverPath\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"p-label\", \"ngModel\", \"p-disabled\", \"ngModelChange\"], [3, \"ngIf\"], [\"name\", \"po_connectionString\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-12\", \"po-lg-12\", 3, \"p-label\", \"ngModel\", \"p-disabled\", \"ngModelChange\"], [1, \"po-row\", \"vertical-align\"], [\"name\", \"po_username\", \"p-required\", \"true\", \"p-icon\", \"po-icon-user\", 1, \"form-control\", \"po-md-4\", \"po-lg-4\", 3, \"p-label\", \"ngModel\", \"ngModelChange\"], [\"name\", \"po_password\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-4\", \"po-lg-4\", 3, \"p-label\", \"ngModel\", \"ngModelChange\"], [\"p-label\", \"Testar Conex\\u00E3o\", \"p-small\", \"false\", \"p-icon\", \"po-icon-database\", \"p-disabled\", \"  ((database.type === null)\\n                      || (database.ip === null)\\n                      || (database.port === null)\\n                      || (database.schema === null)\\n                      || (database.username === null)\\n                      || (database.password === null))\", 1, \"po-sm-4\", \"po-md-4\", \"po-lg-4\", \"po-xl-4\", \"padding-button\", 3, \"p-click\"], [1, \"po-row\", \"footer\"], [\"p-size\", \"medium\", \"p-label\", \"Voltar\", 1, \"po-button\", \"removeBorder\", \"padding-0\", 3, \"p-click\"], [\"p-size\", \"medium\", \"p-label\", \"Salvar\", \"p-kind\", \"primary\", 1, \"po-button\", \"removeBorder\", \"padding-0\", 3, \"p-click\"], [\"name\", \"po_databaseIpType\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-3\", \"po-lg-3\", 3, \"p-label\", \"ngModel\", \"p-options\", \"ngModelChange\", \"p-change\"], [\"name\", \"po_ip\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-3\", \"po-lg-3\", 3, \"p-label\", \"ngModel\", \"p-pattern\", \"ngModelChange\", \"p-change\"], [\"name\", \"po_port\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-3\", \"po-lg-3\", 3, \"p-label\", \"ngModel\", \"p-pattern\", \"ngModelChange\", \"p-change\"], [\"name\", \"po_schema\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-3\", \"po-lg-3\", 3, \"p-label\", \"ngModel\", \"ngModelChange\", \"p-change\"], [\"name\", \"po_instance\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-12\", \"po-lg-12\", 3, \"p-label\", \"ngModel\", \"ngModelChange\", \"p-change\"]],\n    template: function DataBaseAddComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-list\", 0);\n        i0.ɵɵelement(1, \"po-loading-overlay\", 1);\n        i0.ɵɵelementStart(2, \"form\", null, 2)(4, \"po-container\")(5, \"div\", 3)(6, \"po-input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_input_ngModelChange_6_listener($event) {\n          return ctx.database.name = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"po-select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_select_ngModelChange_7_listener($event) {\n          return ctx.database.type = $event;\n        })(\"p-change\", function DataBaseAddComponent_Template_po_select_p_change_7_listener($event) {\n          return ctx.onChangeDatabaseType($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 3)(9, \"po-input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_input_ngModelChange_9_listener($event) {\n          return ctx.database.driverClass = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"po-input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_input_ngModelChange_10_listener($event) {\n          return ctx.database.driverPath = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(11, DataBaseAddComponent_ng_template_11_Template, 5, 11, \"ng-template\", 8);\n        i0.ɵɵtemplate(12, DataBaseAddComponent_ng_template_12_Template, 2, 2, \"ng-template\", 8);\n        i0.ɵɵelementStart(13, \"div\", 3)(14, \"po-input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_input_ngModelChange_14_listener($event) {\n          return ctx.database.connectionString = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 10)(16, \"po-input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_input_ngModelChange_16_listener($event) {\n          return ctx.database.username = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"po-password\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function DataBaseAddComponent_Template_po_password_ngModelChange_17_listener($event) {\n          return ctx.database.password = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"po-button\", 13);\n        i0.ɵɵlistener(\"p-click\", function DataBaseAddComponent_Template_po_button_p_click_18_listener() {\n          return ctx.testDatabaseConnection();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 14)(20, \"po-button\", 15);\n        i0.ɵɵlistener(\"p-click\", function DataBaseAddComponent_Template_po_button_p_click_20_listener() {\n          return ctx.goBack();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"po-button\", 16);\n        i0.ɵɵlistener(\"p-click\", function DataBaseAddComponent_Template_po_button_p_click_21_listener() {\n          return ctx.saveDatabase();\n        });\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate(\"p-title\", ctx.operation);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.po_lo_text.value == null)(\"p-text\", ctx.po_lo_text.value);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_name)(\"ngModel\", ctx.database.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_type)(\"ngModel\", ctx.database.type)(\"p-options\", ctx._CNST_DATABASE_TYPES);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_driverClass)(\"ngModel\", ctx.database.driverClass)(\"p-disabled\", ctx.database.type != \"Outro\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_driverPath)(\"ngModel\", ctx.database.driverPath)(\"p-disabled\", ctx.database.type != \"Outro\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.database.type != \"Outro\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.database.type === \"SQL_Server\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_connectionString)(\"ngModel\", ctx.database.connectionString)(\"p-disabled\", ctx.database.type != \"Outro\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_username)(\"ngModel\", ctx.database.username);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_password)(\"ngModel\", ctx.database.password);\n      }\n    },\n    dependencies: [i6.NgIf, i7.ɵNgNoValidate, i7.NgControlStatus, i7.NgControlStatusGroup, i7.NgModel, i7.NgForm, i8.PoLoadingOverlayComponent, i8.PoPageListComponent, i8.PoContainerComponent, i8.PoInputComponent, i8.PoPasswordComponent, i8.PoSelectComponent, i8.PoButtonComponent],\n    styles: [\".vertical-align[_ngcontent-%COMP%]{align-items:end}\"]\n  });\n  return DataBaseAddComponent;\n})();\nexports.DataBaseAddComponent = DataBaseAddComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}