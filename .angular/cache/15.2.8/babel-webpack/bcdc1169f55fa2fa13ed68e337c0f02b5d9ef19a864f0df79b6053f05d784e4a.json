{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Util = void 0;\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"ngx-electronyzer\");\nconst i2 = require(\"../service/user.service\");\nlet Util = /*#__PURE__*/(() => {\n  class Util {\n    constructor(_electronService, _userService) {\n      this._electronService = _electronService;\n      this._userService = _userService;\n    }\n    tokenWithPrivileges(project) {\n      return new Promise((resolve, reject) => {\n        let hasPrivileges = false;\n        let token = '';\n        let password = '';\n        password = this._electronService.ipcRenderer.sendSync('decrypt', project.GDPassword);\n        this._userService.login(project.GDUsername, password).subscribe(() => {\n          this._userService.getProject(project.GDWorkspaceId).subscribe(projectData => {\n            token = projectData.project.content.authorizationToken;\n            hasPrivileges = this._electronService.ipcRenderer.sendSync('checkToken', token);\n            if (hasPrivileges) {\n              resolve();\n            } else {\n              reject('Projeto sem autorização de exportação!');\n            }\n          }, error => {\n            reject(error);\n          });\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  Util.ɵfac = function Util_Factory(t) {\n    return new (t || Util)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.UserService));\n  };\n  Util.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Util,\n    factory: Util.ɵfac\n  });\n  return Util;\n})();\nexports.Util = Util;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}