{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatabaseService = void 0;\nconst _constants = require(\"../utilities/constants-angular\");\nconst database_messages_1 = require(\"./database-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../utilities/utilities\");\nlet DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(http, _electronService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getDatabases() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getDatabases'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/databases').pipe((0, operators_1.map)(databases => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOADING_OK);\n          return databases;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveDatabase(db) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE(db.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveDatabase', db));\n      } else {\n        if (db.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/databases/' + db.id, db).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE_ERROR(db.name), err);\n            throw err;\n          }));\n        } else {\n          return this.getDatabases().pipe((0, operators_1.switchMap)(database => {\n            db.id = this._utilities.findNextId(database);\n            return this._http.post(this._utilities.getLocalhostURL() + '/databases', db).pipe((0, operators_1.map)(() => {\n              this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE_OK);\n              return true;\n            }), (0, rxjs_1.catchError)(err => {\n              this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_SAVE_ERROR(db.name), err);\n              throw err;\n            }));\n          }));\n        }\n      }\n    }\n    deleteDatabase(db) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_DELETE(db.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteDatabase', db));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/databases/' + db.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_DELETE_ERROR(db.name), err);\n          throw err;\n        }));\n      }\n    }\n    testConnection(decrypt, db) {\n      let password = null;\n      let testConnection = {\n        success: null,\n        err: null\n      };\n      if (this._electronService.isElectronApp) {\n        this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOGIN(db.name));\n        if (decrypt) {\n          db.password = this._electronService.ipcRenderer.sendSync('decrypt', db.password);\n        }\n        let javaInput = {\n          workspace: null,\n          database: db,\n          java: null,\n          schedule: null,\n          queries: null,\n          scripts: null\n        };\n        let params = this._electronService.ipcRenderer.sendSync('encrypt', JSON.stringify(javaInput));\n        testConnection = this._electronService.ipcRenderer.sendSync('testDatabaseConnection', params);\n        if (!testConnection.success) {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOGIN_ERROR(db.name), testConnection.err);\n        } else {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.INFO, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOGIN_OK);\n        }\n      } else {\n        testConnection.success = true;\n        testConnection.err = null;\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.WARN, database_messages_1.CNST_DATABASE_MESSAGES.DATABASE_LOGIN_WARNING);\n      }\n      return testConnection.success;\n    }\n  }\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.Utilities));\n  };\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();\nexports.DatabaseService = DatabaseService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}