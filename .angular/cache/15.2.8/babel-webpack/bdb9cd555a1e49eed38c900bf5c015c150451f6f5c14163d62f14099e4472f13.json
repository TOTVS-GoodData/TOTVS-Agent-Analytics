{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScheduleAddComponent = void 0;\nconst schedule_messages_1 = require(\"../schedule/schedule-messages\");\nconst interfaces_1 = require(\"../utilities/interfaces\");\nconst _constants = require(\"../utilities/constants-angular\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"../workspace/workspace-service\");\nconst i2 = require(\"../schedule/schedule-service\");\nconst i3 = require(\"../database/database-service\");\nconst i4 = require(\"ngx-electronyzer\");\nconst i5 = require(\"../utilities/utilities\");\nconst i6 = require(\"@angular/router\");\nconst i7 = require(\"@angular/forms\");\nconst i8 = require(\"@po-ui/ng-components\");\nconst CNST_FIELD_NAMES = [{\n  key: 'name',\n  value: 'Nome do agendamento*'\n}, {\n  key: 'workspaceId',\n  value: 'Ambiente*'\n}, {\n  key: 'windows',\n  value: 'Janelas de execução*'\n}, {\n  key: 'enabled',\n  value: 'Habilitado?'\n}, {\n  key: 'GDZipFilename',\n  value: 'Nome do arquivo*'\n}, {\n  key: 'GDZipExtension',\n  value: 'Extensão do arquivo*'\n}, {\n  key: 'fileFolder',\n  value: 'Pasta p/ upload'\n}, {\n  key: 'fileFolderWildcard',\n  value: 'Formato válido'\n}];\nlet ScheduleAddComponent = /*#__PURE__*/(() => {\n  class ScheduleAddComponent {\n    /*************************************************/\n    /*************************************************/\n    /*************************************************/\n    constructor(_workspaceService, _scheduleService, _databaseService, _electronService, _utilities, _router) {\n      this._workspaceService = _workspaceService;\n      this._scheduleService = _scheduleService;\n      this._databaseService = _databaseService;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._router = _router;\n      this.CNST_MESSAGES = {\n        SCHEDULE_VALIDATE: 'Validando informações do agendamento...',\n        FOLDER_SELECT_WARNING: 'Aviso - Seleção de arquivos / diretórios não podem ser testadas sem o electron.'\n      };\n      this.po_lo_text = {\n        value: null\n      };\n      this.schedule = new interfaces_1.Schedule();\n      this.listProjects = [{\n        label: undefined,\n        value: undefined\n      }];\n      this.po_grid_config_sql = [{\n        property: 'name',\n        label: 'Nome',\n        width: 30,\n        required: true,\n        editable: true\n      }, {\n        property: 'value',\n        label: 'Valor',\n        width: 60,\n        required: true,\n        editable: true\n      }, {\n        property: 'sql',\n        label: 'SQL (S/N)?',\n        width: 10,\n        required: true,\n        editable: true\n      }];\n      this.po_grid_config_etl = [{\n        property: 'name',\n        label: 'Nome',\n        width: 30,\n        required: true,\n        editable: true\n      }, {\n        property: 'value',\n        label: 'Valor',\n        width: 70,\n        required: true,\n        editable: true\n      }];\n      this.po_gridActionsETL = {\n        beforeRemove: this.onBeforeRemoveETL.bind(this),\n        beforeInsert: this.onBeforeInsertETL.bind(this)\n      };\n      this.po_gridActionsSQL = {\n        beforeRemove: this.onBeforeRemoveSQL.bind(this),\n        beforeInsert: this.onBeforeInsertSQL.bind(this)\n      };\n      this._CNST_EXTENSION = _constants.CNST_EXTENSION;\n      this._CNST_NEW_PARAMETER_VALUE = _constants.CNST_NEW_PARAMETER_VALUE;\n      this._CNST_FIELD_NAMES = CNST_FIELD_NAMES;\n      this.lbl_name = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'name';\n      }).value;\n      this.lbl_workspaceId = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'workspaceId';\n      }).value;\n      this.lbl_windows = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'windows';\n      }).value;\n      this.lbl_enabled = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'enabled';\n      }).value;\n      this.lbl_fileFolder = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'fileFolder';\n      }).value;\n      this.lbl_fileFolderWildcard = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'fileFolderWildcard';\n      }).value;\n      this.lbl_GDZipFilename = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'GDZipFilename';\n      }).value;\n      this.lbl_GDZipExtension = this._CNST_FIELD_NAMES.find(v => {\n        return v.key == 'GDZipExtension';\n      }).value;\n      (0, rxjs_1.forkJoin)([this._workspaceService.getWorkspaces(), this._databaseService.getDatabases()]).subscribe(results => {\n        this.projects = results[0];\n        this.databases = results[1];\n        this.listProjects = this.projects.map(w => {\n          return {\n            label: w.name,\n            value: w.id\n          };\n        });\n      }, err => {\n        this.po_lo_text = {\n          value: null\n        };\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_LOADING_ERROR, err);\n      });\n      this._CNST_ERP = _constants.CNST_ERP;\n      this._CNST_EXECUTION_WINDOWS = _constants.CNST_EXECUTION_WINDOWS.map(v => {\n        return {\n          label: v,\n          value: v\n        };\n      });\n      let nav = this._router.getCurrentNavigation();\n      if (nav != undefined && nav.extras.state) {\n        this.operation = 'Alterar Agendamento';\n        Object.getOwnPropertyNames.call(Object, nav.extras.state).map(p => {\n          this.schedule[p] = nav.extras.state[p];\n        });\n        this.schedule.SQLParameters = this.schedule.SQLParameters.map(p => {\n          return {\n            name: p.name,\n            value: p.value,\n            sql: p.sql == true ? 'S' : 'N'\n          };\n        });\n      } else {\n        this.operation = 'Cadastrar Agendamento';\n        this.schedule.ETLParameters = [];\n        this.schedule.SQLParameters = [];\n      }\n    }\n    goToSchedules() {\n      this._router.navigate(['/schedule']);\n    }\n    onBeforeInsertETL() {\n      let valid = false;\n      let new_parameter = this.schedule.ETLParameters.filter(p => {\n        return p.value === this._CNST_NEW_PARAMETER_VALUE;\n      })[0];\n      if (new_parameter === undefined) {\n        this.schedule.ETLParameters.push(new interfaces_1.ETLParameter());\n        valid = true;\n      }\n      return valid;\n    }\n    onBeforeInsertSQL() {\n      let valid = false;\n      let new_parameter = this.schedule.SQLParameters.filter(p => {\n        return p.value === this._CNST_NEW_PARAMETER_VALUE;\n      })[0];\n      if (new_parameter === undefined) {\n        this.schedule.SQLParameters.push(new interfaces_1.SQLParameter());\n        valid = true;\n      }\n      return valid;\n    }\n    onBeforeRemoveETL() {\n      this.clearUnusedParametersETL();\n    }\n    onBeforeRemoveSQL() {\n      this.clearUnusedParametersSQL();\n    }\n    updateStandardParameters() {\n      let workspace = this.projects.find(w => w.id === this.schedule.workspaceId);\n      let database = this.databases.find(db => db.id === workspace.databaseId);\n      this.schedule.workspaceName = workspace.name;\n      this.schedule.ETLParameters = this._CNST_ERP.find(e => e.ERP === workspace.erp).Parametros.ETL;\n      if (database) {\n        this.schedule.SQLParameters = this._CNST_ERP.find(e => e.ERP === workspace.erp).Parametros[database.type].filter(p2 => {\n          return p2.Modulos.includes(workspace.module) || p2.Modulos.length == 0;\n        }).map(p3 => {\n          return {\n            name: p3.name,\n            value: p3.value,\n            sql: p3.sql ? 'S' : 'N'\n          };\n        });\n      }\n    }\n    saveSchedule() {\n      if (this.validateSchedule()) {\n        this.po_lo_text = {\n          value: schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE\n        };\n        this.schedule.SQLParameters = this.schedule.SQLParameters.map(p => {\n          return {\n            name: p.name,\n            value: p.value,\n            sql: p.sql == 'S' ? true : false\n          };\n        });\n        this._scheduleService.saveSchedule(this.schedule).subscribe(b => {\n          this.po_lo_text = {\n            value: null\n          };\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.INFO, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_OK);\n          this._router.navigate(['/schedule']);\n        }, err => {\n          this.po_lo_text = {\n            value: null\n          };\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_ERROR);\n        });\n      }\n    }\n    clearUnusedParametersETL() {\n      this.schedule.ETLParameters = this.schedule.ETLParameters.filter(p => {\n        p.value = p.value.replace(/\\s+/g, '');\n        return p.value != null && p.value != '' && p.value != this._CNST_NEW_PARAMETER_VALUE;\n      });\n    }\n    clearUnusedParametersSQL() {\n      this.schedule.SQLParameters = this.schedule.SQLParameters.filter(p => {\n        p.value = p.value.replace(/\\s+/g, '');\n        return p.value != null && p.value != '' && p.value != this._CNST_NEW_PARAMETER_VALUE;\n      });\n    }\n    validateSchedule() {\n      let valid = true;\n      let schedule = new interfaces_1.Schedule();\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, this.CNST_MESSAGES.SCHEDULE_VALIDATE);\n      this.po_lo_text = {\n        value: this.CNST_MESSAGES.SCHEDULE_VALIDATE\n      };\n      // Todo processo de ETL precisa ter um graph preenchido. //\n      if (this.schedule.fileFolder != undefined) {\n        schedule.fileFolderWildcard = this.schedule.fileFolderWildcard;\n      }\n      let propertiesNotDefined = Object.getOwnPropertyNames.call(Object, schedule).map(p => {\n        if (this.schedule[p] == undefined && p != 'id') return p;\n      }).filter(p => {\n        return p != null;\n      });\n      // Validação dos campos de formulário //\n      if (propertiesNotDefined.length > 0) {\n        valid = false;\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, 'Campo obrigatório \"' + this._CNST_FIELD_NAMES.find(f => {\n          return f.key === propertiesNotDefined[0];\n        }).value + '\" não preenchido.');\n        this.po_lo_text = {\n          value: null\n        };\n      } else {\n        // Validação dos parâmetros SQL //\n        this.schedule.SQLParameters.map(p => {\n          if (p.sql.toUpperCase() != 'S' && p.sql.toUpperCase() != 'N') {\n            valid = false;\n          }\n        });\n        if (!valid) {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, 'Os parâmetros SQL só podem ser do tipo \"S\" ou \"N\". Por favor, verifique o preenchimento dos mesmos.');\n          this.po_lo_text = {\n            value: null\n          };\n        }\n      }\n      return valid;\n    }\n    getFolder() {\n      if (this._electronService.isElectronApp) {\n        this.schedule.fileFolder = this._electronService.ipcRenderer.sendSync('getFolder');\n      } else {\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.WARN, schedule_messages_1.CNST_SCHEDULE_MESSAGES.FOLDER_SELECT_WARNING);\n        this.po_lo_text = {\n          value: null\n        };\n      }\n    }\n  }\n  ScheduleAddComponent.ɵfac = function ScheduleAddComponent_Factory(t) {\n    return new (t || ScheduleAddComponent)(i0.ɵɵdirectiveInject(i1.WorkspaceService), i0.ɵɵdirectiveInject(i2.ScheduleService), i0.ɵɵdirectiveInject(i3.DatabaseService), i0.ɵɵdirectiveInject(i4.ElectronService), i0.ɵɵdirectiveInject(i5.Utilities), i0.ɵɵdirectiveInject(i6.Router));\n  };\n  ScheduleAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ScheduleAddComponent,\n    selectors: [[\"app-schedule-add\"]],\n    decls: 44,\n    vars: 29,\n    consts: [[3, \"p-title\"], [\"p-screen-lock\", \"true\", 3, \"hidden\", \"p-text\"], [\"scheduleForm\", \"ngForm\"], [1, \"form-group\", \"po-row\"], [\"name\", \"po_name\", \"p-required\", \"true\", 1, \"form-control\", \"po-sm-6\", \"po-md-6\", \"po-lg-6\", \"po-xl-6\", 3, \"ngModel\", \"p-label\", \"ngModelChange\"], [\"name\", \"po_workspaceId\", \"p-required\", \"true\", 1, \"form-control\", \"po-sm-6\", \"po-md-6\", \"po-lg-6\", \"po-xl-6\", 3, \"ngModel\", \"p-label\", \"p-options\", \"p-change\", \"ngModelChange\"], [1, \"form-group\", \"po-row\", \"vertical-align\"], [\"name\", \"po_execution_windows\", \"p-required\", \"true\", \"p-hide-select-all\", \"true\", \"p-sort\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"ngModel\", \"p-label\", \"p-options\", \"ngModelChange\"], [\"name\", \"po_enabled\", \"p-size\", \"medium\", 1, \"form-control\", \"vertical-align\", \"po-md-6\", \"po-lg-6\", 3, \"ngModel\", \"p-label\", \"ngModelChange\"], [1, \"po-row\"], [\"name\", \"filename\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"p-label\", \"ngModel\", \"ngModelChange\"], [\"name\", \"extension\", \"pricedescricaocompleta\", \"\", \"p-required\", \"true\", 1, \"form-control\", \"po-md-6\", \"po-lg-6\", 3, \"ngModel\", \"p-label\", \"p-options\", \"ngModelChange\"], [1, \"po-row\", \"vertical-align\", \"conf-row\"], [1, \"po-md-6\", \"po-lg-6\", \"flex\", \"footer\"], [\"name\", \"po_fileFolder\", 1, \"conf-select\", \"grow\", 3, \"ngModel\", \"p-disabled\", \"ngModelChange\"], [\"p-icon\", \"po-icon-folder\", \"p-size\", \"medium\", 3, \"p-click\"], [\"name\", \"po_fileFolderWildcard\", 1, \"grow\", 3, \"ngModel\", \"ngModelChange\"], [1, \"title\", \"po-sm-12\", \"po-md-12\", \"po-lg-12\", \"po-xl-12\"], [1, \"subtitle\", \"po-sm-11\", \"po-md-11\", \"po-lg-11\", \"po-xl-11\"], [1, \"po-row\", \"padding-button\"], [\"p-size\", \"medium\", \"p-label\", \"Novo par\\u00E2metro\", \"p-kind\", \"primary\", 1, \"po-button\", \"removeBorder\", 3, \"p-click\"], [1, \"form-control\", 3, \"p-data\", \"p-columns\", \"p-row-actions\"], [\"po_grid_sql\", \"\"], [1, \"po-row\", \"grid-title\"], [1, \"subtitle\", \"po-sm-12\", \"po-md-12\", \"po-lg-12\", \"po-xl-12\"], [\"po_grid_etl\", \"\"], [1, \"po-row\", \"footer\"], [\"p-size\", \"medium\", \"p-label\", \"Voltar\", 1, \"po-button\", \"removeBorder\", \"padding-0\", 3, \"p-click\"], [\"p-size\", \"medium\", \"p-label\", \"Salvar\", \"p-kind\", \"primary\", 1, \"po-button\", \"removeBorder\", \"padding-0\", 3, \"p-click\"]],\n    template: function ScheduleAddComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-list\", 0);\n        i0.ɵɵelement(1, \"po-loading-overlay\", 1);\n        i0.ɵɵelementStart(2, \"form\", null, 2)(4, \"div\", 3)(5, \"po-input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_input_ngModelChange_5_listener($event) {\n          return ctx.schedule.name = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"po-select\", 5);\n        i0.ɵɵlistener(\"p-change\", function ScheduleAddComponent_Template_po_select_p_change_6_listener() {\n          return ctx.updateStandardParameters();\n        })(\"ngModelChange\", function ScheduleAddComponent_Template_po_select_ngModelChange_6_listener($event) {\n          return ctx.schedule.workspaceId = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"po-multiselect\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_multiselect_ngModelChange_8_listener($event) {\n          return ctx.schedule.windows = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"po-checkbox\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_checkbox_ngModelChange_9_listener($event) {\n          return ctx.schedule.enabled = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"po-input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_input_ngModelChange_11_listener($event) {\n          return ctx.schedule.GDZipFilename = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"po-select\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_select_ngModelChange_12_listener($event) {\n          return ctx.schedule.GDZipExtension = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 12)(14, \"div\", 13)(15, \"span\");\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"po-input\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_input_ngModelChange_17_listener($event) {\n          return ctx.schedule.fileFolder = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"po-button\", 15);\n        i0.ɵɵlistener(\"p-click\", function ScheduleAddComponent_Template_po_button_p_click_18_listener() {\n          return ctx.getFolder();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 13)(20, \"span\");\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"po-input\", 16);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleAddComponent_Template_po_input_ngModelChange_22_listener($event) {\n          return ctx.schedule.fileFolderWildcard = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 9)(24, \"span\", 17);\n        i0.ɵɵtext(25, \"Par\\u00E2metros SQL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"span\", 18);\n        i0.ɵɵtext(27, \"Par\\u00E2metros das consultas de extra\\u00E7\\u00E3o\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 19)(29, \"po-button\", 20);\n        i0.ɵɵlistener(\"p-click\", function ScheduleAddComponent_Template_po_button_p_click_29_listener() {\n          return ctx.onBeforeInsertSQL();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(30, \"po-grid\", 21, 22);\n        i0.ɵɵelementStart(32, \"div\", 23)(33, \"span\", 17);\n        i0.ɵɵtext(34, \"Par\\u00E2metros ETL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"span\", 24);\n        i0.ɵɵtext(36, \"Par\\u00E2metros das consultas do ETL\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 19)(38, \"po-button\", 20);\n        i0.ɵɵlistener(\"p-click\", function ScheduleAddComponent_Template_po_button_p_click_38_listener() {\n          return ctx.onBeforeInsertETL();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(39, \"po-grid\", 21, 25);\n        i0.ɵɵelementStart(41, \"div\", 26)(42, \"po-button\", 27);\n        i0.ɵɵlistener(\"p-click\", function ScheduleAddComponent_Template_po_button_p_click_42_listener() {\n          return ctx.goToSchedules();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"po-button\", 28);\n        i0.ɵɵlistener(\"p-click\", function ScheduleAddComponent_Template_po_button_p_click_43_listener() {\n          return ctx.saveSchedule();\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate(\"p-title\", ctx.operation);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.po_lo_text.value == null)(\"p-text\", ctx.po_lo_text.value);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.name)(\"p-label\", ctx.lbl_name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.workspaceId)(\"p-label\", ctx.lbl_workspaceId)(\"p-options\", ctx.listProjects);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.windows)(\"p-label\", ctx.lbl_windows)(\"p-options\", ctx._CNST_EXECUTION_WINDOWS);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.enabled)(\"p-label\", ctx.lbl_enabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"p-label\", ctx.lbl_GDZipFilename)(\"ngModel\", ctx.schedule.GDZipFilename);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.GDZipExtension)(\"p-label\", ctx.lbl_GDZipExtension)(\"p-options\", ctx._CNST_EXTENSION);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.lbl_fileFolder);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.fileFolder)(\"p-disabled\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.lbl_fileFolderWildcard);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.schedule.fileFolderWildcard);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"p-data\", ctx.schedule.SQLParameters)(\"p-columns\", ctx.po_grid_config_sql)(\"p-row-actions\", ctx.po_gridActionsSQL);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"p-data\", ctx.schedule.ETLParameters)(\"p-columns\", ctx.po_grid_config_etl)(\"p-row-actions\", ctx.po_gridActionsETL);\n      }\n    },\n    dependencies: [i7.ɵNgNoValidate, i7.NgControlStatus, i7.NgControlStatusGroup, i7.NgModel, i7.NgForm, i8.PoLoadingOverlayComponent, i8.PoPageListComponent, i8.PoInputComponent, i8.PoMultiselectComponent, i8.PoSelectComponent, i8.PoCheckboxComponent, i8.PoButtonComponent, i8.PoGridComponent],\n    styles: [\"@media screen and (max-width: 1366px){.small-size[_ngcontent-%COMP%]{font-family:NunitoSans;font-size:14px;line-height:24px;height:32px;margin-top:13px!important}}.po-grid-cell-input[_ngcontent-%COMP%]{width:100px!important}.flex[_ngcontent-%COMP%]{display:flex;align-items:center}.grow[_ngcontent-%COMP%]{flex-grow:1}.vertical-align[_ngcontent-%COMP%]{display:flex;justify-content:left}.conf-row[_ngcontent-%COMP%]{max-width:100%}.conf-select[_ngcontent-%COMP%]{flex-grow:1}.label-field[_ngcontent-%COMP%]{margin-top:17px}.dateTime-margin[_ngcontent-%COMP%]{margin-top:5px!important;margin-bottom:15px!important}.interval-label[_ngcontent-%COMP%]{text-align:right}.grid-title[_ngcontent-%COMP%]{margin-top:3%}.margin-zero[_ngcontent-%COMP%]{padding:0}.interval-hours-label[_ngcontent-%COMP%]{margin-top:2%}\"]\n  });\n  return ScheduleAddComponent;\n})();\nexports.ScheduleAddComponent = ScheduleAddComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}