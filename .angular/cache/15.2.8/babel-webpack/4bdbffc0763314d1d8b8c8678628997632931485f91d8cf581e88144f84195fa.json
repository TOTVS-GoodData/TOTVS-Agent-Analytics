{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkspaceService = void 0;\nconst _constants = require(\"../utilities/constants-angular\");\nconst workspace_messages_1 = require(\"./workspace-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../utilities/utilities\");\nlet WorkspaceService = /*#__PURE__*/(() => {\n  class WorkspaceService {\n    constructor(http, _electronService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getWorkspaces() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getWorkspaces'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/workspaces').pipe((0, operators_1.map)(workspaces => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_OK);\n          return workspaces;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    getWorkspacesByJavaConfiguration(j) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getWorkspacesByJavaConfiguration', j));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/workspaces?javaId=' + j.id).pipe((0, operators_1.map)(workspaces => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_OK);\n          return workspaces;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    getWorkspacesByDatabase(db) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_DATABASES(db.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getWorkspacesByDatabase', db));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/workspaces?databaseId=' + db.id).pipe((0, operators_1.map)(workspaces => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_DATABASES_OK);\n          return workspaces;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_LOADING_DATABASES_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveWorkspace(w) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_SAVE(w.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveWorkspace', w));\n      } else {\n        if (w.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/workspaces/' + w.id, w).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_SAVE_ERROR(w.name), err);\n            throw err;\n          }));\n        } else {\n          return this._http.post(this._utilities.getLocalhostURL() + '/workspaces', w).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_SAVE_ERROR(w.name), err);\n            throw err;\n          }));\n        }\n      }\n    }\n    deleteWorkspace(w) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_DELETE(w.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteWorkspace', w));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/workspaces/' + w.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, workspace_messages_1.CNST_WORKSPACE_MESSAGES.WORKSPACE_DELETE_ERROR(w.name), err);\n          throw err;\n        }));\n      }\n    }\n  }\n  WorkspaceService.ɵfac = function WorkspaceService_Factory(t) {\n    return new (t || WorkspaceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.Utilities));\n  };\n  WorkspaceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkspaceService,\n    factory: WorkspaceService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorkspaceService;\n})();\nexports.WorkspaceService = WorkspaceService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}