{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpService = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"./login.service\");\nconst i3 = require(\"./session-service\");\nconst i4 = require(\"../utilities/utilities\");\nlet HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(_http, _loginService, _sessionService, _utilities) {\n      this._http = _http;\n      this._loginService = _loginService;\n      this._sessionService = _sessionService;\n      this._utilities = _utilities;\n    }\n    get(url, options = {}) {\n      options.headers = this._setHeaders(options.headers);\n      return this._http.get(this._sessionService.SERVER + url, options).pipe((0, operators_1.catchError)(error => {\n        if (error.status === 401 || error.status === 0 || error.status == null) {\n          return this._loginService.refreshLoginSection().pipe((0, operators_1.mergeMap)(res => {\n            options.headers = this._setHeaders(options.headers);\n            return this._http.get(this._sessionService.SERVER + url, options);\n          }));\n        }\n        return (0, rxjs_1.throwError)(error);\n      }));\n    }\n    put(urn, body, options = {}) {\n      options.headers = this._setHeaders(options.headers);\n      return this._http.put(this._sessionService.SERVER + urn, body, options);\n    }\n    post(urn, body, options = {}) {\n      options.headers = this._setHeaders(options.headers);\n      return this._http.post(this._sessionService.SERVER + urn, body, options);\n    }\n    delete(urn, options = {}) {\n      options.headers = this._setHeaders(options.headers);\n      return this._http.delete(this._sessionService.SERVER + urn, options);\n    }\n    patch(urn, options = {}) {\n      options.headers = this._setHeaders(options.headers);\n      return this._http.patch(this._sessionService.SERVER + urn, options);\n    }\n    _setHeaders(headers) {\n      if (!headers) {\n        headers = this._utilities.getDefaultHeaders();\n      }\n      headers = this._utilities.addGoodDataHeaders(headers);\n      return headers;\n    }\n  }\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.SessionService), i0.ɵɵinject(i4.Utilities));\n  };\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();\nexports.HttpService = HttpService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}