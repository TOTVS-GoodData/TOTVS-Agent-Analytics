{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JavaService = void 0;\nconst _constants = require(\"../utilities/constants-angular\");\nconst java_messages_1 = require(\"./java-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../utilities/utilities\");\nlet JavaService = /*#__PURE__*/(() => {\n  class JavaService {\n    constructor(http, _electronService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getJavaConfigurations() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getJavaConfigurations'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/javas').pipe((0, operators_1.map)(javas => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_LOADING_OK);\n          return javas;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, java_messages_1.CNST_JAVA_MESSAGES.JAVA_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveJavaConfiguration(j) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_SAVE(j.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveJavaConfiguration', j));\n      } else {\n        if (j.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/javas/' + j.id, j).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, java_messages_1.CNST_JAVA_MESSAGES.JAVA_SAVE_ERROR(j.name), err);\n            throw err;\n          }));\n        } else {\n          return this.getJavaConfigurations().pipe((0, operators_1.switchMap)(java => {\n            j.id = this._utilities.findNextId(java);\n            return this._http.post(this._utilities.getLocalhostURL() + '/javas', j).pipe((0, operators_1.map)(() => {\n              this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_SAVE_OK);\n              return true;\n            }), (0, rxjs_1.catchError)(err => {\n              this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, java_messages_1.CNST_JAVA_MESSAGES.JAVA_SAVE_ERROR(j.name), err);\n              throw err;\n            }));\n          }));\n        }\n      }\n    }\n    deleteJavaConfiguration(j) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_DELETE(j.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteJavaConfiguration', j));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/javas/' + j.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, java_messages_1.CNST_JAVA_MESSAGES.JAVA_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, java_messages_1.CNST_JAVA_MESSAGES.JAVA_DELETE_ERROR(j.name), err);\n          throw err;\n        }));\n      }\n    }\n  }\n  JavaService.ɵfac = function JavaService_Factory(t) {\n    return new (t || JavaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.Utilities));\n  };\n  JavaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JavaService,\n    factory: JavaService.ɵfac,\n    providedIn: 'root'\n  });\n  return JavaService;\n})();\nexports.JavaService = JavaService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}