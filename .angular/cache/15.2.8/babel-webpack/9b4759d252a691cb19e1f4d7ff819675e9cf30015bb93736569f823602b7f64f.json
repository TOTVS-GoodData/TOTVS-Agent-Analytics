{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigurationService = void 0;\nconst _constants = require(\"../utilities/constants-angular\");\nconst configuration_messages_1 = require(\"./configuration-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../utilities/utilities\");\nlet ConfigurationService = /*#__PURE__*/(() => {\n  class ConfigurationService {\n    constructor(http, _electronService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getConfiguration() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getConfiguration'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/configuration').pipe((0, operators_1.map)(configuration => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_LOADING_OK);\n          this._utilities.debugMode = configuration.debug;\n          return configuration;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveConfiguration(conf) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_SAVE);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveConfiguration', conf));\n      } else {\n        return this._http.put(this._utilities.getLocalhostURL() + '/configuration', conf).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_SAVE_OK);\n          this._utilities.debugMode = conf.debug;\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, configuration_messages_1.CNST_CONFIGURATION_MESSAGES.CONFIG_SAVE_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n  }\n  ConfigurationService.ɵfac = function ConfigurationService_Factory(t) {\n    return new (t || ConfigurationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.Utilities));\n  };\n  ConfigurationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigurationService,\n    factory: ConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConfigurationService;\n})();\nexports.ConfigurationService = ConfigurationService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}