{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScheduleService = void 0;\nconst _constants = require(\"../utilities/constants-angular\");\nconst schedule_messages_1 = require(\"./schedule-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../workspace/workspace-service\");\nconst i4 = require(\"../database/database-service\");\nconst i5 = require(\"../java/java-service\");\nconst i6 = require(\"../query/query-service\");\nconst i7 = require(\"../script/script-service\");\nconst i8 = require(\"../utilities/utilities\");\nlet ScheduleService = /*#__PURE__*/(() => {\n  class ScheduleService {\n    constructor(http, _electronService, _workspaceService, _databaseService, _javaService, _queryService, _scriptService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._workspaceService = _workspaceService;\n      this._databaseService = _databaseService;\n      this._javaService = _javaService;\n      this._queryService = _queryService;\n      this._scriptService = _scriptService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getSchedules(showLogs) {\n      if (showLogs) this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getSchedules', showLogs));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/schedules').pipe((0, operators_1.map)(schedules => {\n          if (showLogs) this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_LOADING_OK);\n          return schedules;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveSchedule(s) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE(s.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveSchedule', s));\n      } else {\n        if (s.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/schedules/' + s.id, s).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_ERROR(s.name), err);\n            throw err;\n          }));\n        } else {\n          return this._http.post(this._utilities.getLocalhostURL() + '/schedules', s).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_SAVE_ERROR(s.name), err);\n            throw err;\n          }));\n        }\n      }\n    }\n    deleteSchedule(s) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_DELETE(s.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteSchedule', s));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/schedules/' + s.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, schedule_messages_1.CNST_SCHEDULE_MESSAGES.SCHEDULE_DELETE_ERROR(s.name), err);\n          throw err;\n        }));\n      }\n    }\n  }\n  ScheduleService.ɵfac = function ScheduleService_Factory(t) {\n    return new (t || ScheduleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.WorkspaceService), i0.ɵɵinject(i4.DatabaseService), i0.ɵɵinject(i5.JavaService), i0.ɵɵinject(i6.QueryService), i0.ɵɵinject(i7.ScriptService), i0.ɵɵinject(i8.Utilities));\n  };\n  ScheduleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScheduleService,\n    factory: ScheduleService.ɵfac,\n    providedIn: 'root'\n  });\n  return ScheduleService;\n})();\nexports.ScheduleService = ScheduleService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}