{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScriptService = void 0;\nconst interfaces_1 = require(\"../utilities/interfaces\");\nconst _constants = require(\"../utilities/constants-angular\");\nconst script_messages_1 = require(\"./script-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../workspace/workspace-service\");\nconst i4 = require(\"../database/database-service\");\nconst i5 = require(\"../utilities/utilities\");\nlet ScriptService = /*#__PURE__*/(() => {\n  class ScriptService {\n    constructor(http, _electronService, _workspaceService, _databaseService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._workspaceService = _workspaceService;\n      this._databaseService = _databaseService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getScripts() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getScripts'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/scripts').pipe((0, operators_1.map)(scripts => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_LOADING_OK);\n          return scripts;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    getScriptsBySchedule(sc) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SCHEDULE_LOADING(sc.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getScriptsBySchedule', sc));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/scripts?scheduleId=' + sc.id).pipe((0, operators_1.map)(scripts => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SCHEDULE_LOADING_OK);\n          return scripts;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SCHEDULE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveScript(s) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SAVE(s.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveScript', s));\n      } else {\n        if (s.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/scripts/' + s.id, s).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SAVE_ERROR(s.name), err);\n            throw err;\n          }));\n        } else {\n          return this._http.post(this._utilities.getLocalhostURL() + '/scripts', s).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_SAVE_ERROR(s.name), err);\n            throw err;\n          }));\n        }\n      }\n    }\n    deleteScript(s) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_DELETE(s.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteScript', s));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/scripts/' + s.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_DELETE_ERROR(s.name), err);\n          throw err;\n        }));\n      }\n    }\n    exportScript(ss) {\n      let scripts = [];\n      let decrypt = false;\n      let script_names = [];\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT);\n      script_names = ss.scripts.map(s => s.name);\n      scripts = this.exportScriptFromRepository(ss);\n      scripts = scripts.filter(s => script_names.includes(s.name) ? false : true);\n      if (scripts.length > 0) {\n        let obs_scripts = scripts.map(script => {\n          let s = new interfaces_1.Script();\n          s.scheduleId = ss.schedule.id;\n          s.name = script.name;\n          s.canDecrypt = ss.contractType == _constants.CNST_MODALIDADE_CONTRATACAO_PLATAFORMA ? true : false;\n          s.script = script.script;\n          return this.saveScript(s);\n        });\n        this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_SAVE(ss.schedule.name));\n        return (0, rxjs_1.forkJoin)(obs_scripts).pipe((0, operators_1.map)(() => {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.INFO, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_OK, null);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_SAVE_ERROR(ss.schedule.name));\n          throw err;\n        }));\n      } else if (this._electronService.isElectronApp) {\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.WARN, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_WARNING(ss.schedule.name));\n        return (0, rxjs_1.of)(false);\n      } else {\n        return (0, rxjs_1.of)(false);\n      }\n    }\n    exportScriptFromRepository(ss) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_STANDARD);\n      let scrips = _constants.CNST_ERP.find(erp => erp.ERP == ss.erp).Scripts[ss.databaseType].filter(s => s.Modulos.includes(ss.module) || s.Modulos.length == 0);\n      if (scrips.length > 0) this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_STANDARD_OK);else this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, script_messages_1.CNST_SCRIPT_MESSAGES.SCRIPT_EXPORT_STANDARD_WARNING);\n      return scrips;\n    }\n  }\n  ScriptService.ɵfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.WorkspaceService), i0.ɵɵinject(i4.DatabaseService), i0.ɵɵinject(i5.Utilities));\n  };\n  ScriptService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.ɵfac,\n    providedIn: 'root'\n  });\n  return ScriptService;\n})();\nexports.ScriptService = ScriptService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}