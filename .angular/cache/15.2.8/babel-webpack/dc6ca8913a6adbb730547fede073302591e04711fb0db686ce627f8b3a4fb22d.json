{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nlet ElectronService = /*#__PURE__*/(() => {\n  class ElectronService {\n    constructor() {\n      this._electron = window.require?.('electron');\n    }\n    get isElectronApp() {\n      return !!this._electron;\n    }\n    get isMacOS() {\n      return this._electron?.platform === 'darwin';\n    }\n    get isWindows() {\n      return this._electron?.platform === 'win32';\n    }\n    get isLinux() {\n      return this._electron?.platform === 'linux';\n    }\n    get isX86() {\n      return this._electron?.arch === 'ia32';\n    }\n    get isX64() {\n      return this._electron?.arch === 'x64';\n    }\n    get isArm() {\n      return this._electron?.arch === 'arm';\n    }\n    get desktopCapturer() {\n      return this._electron?.desktopCapturer;\n    }\n    get ipcRenderer() {\n      return this._electron?.ipcRenderer;\n    }\n    get webFrame() {\n      return this._electron?.webFrame;\n    }\n    get clipboard() {\n      return this._electron?.clipboard;\n    }\n    get crashReporter() {\n      return this._electron?.crashReporter;\n    }\n    get nativeImage() {\n      return this._electron?.nativeImage;\n    }\n    get shell() {\n      return this._electron?.shell;\n    }\n  }\n  ElectronService.ɵfac = function ElectronService_Factory(t) {\n    return new (t || ElectronService)();\n  };\n  ElectronService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ElectronService,\n    factory: ElectronService.ɵfac,\n    providedIn: 'root'\n  });\n  return ElectronService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API Surface of electron\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ElectronService };\n//# sourceMappingURL=ngx-electronyzer.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}