{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryService = void 0;\nconst interfaces_1 = require(\"../utilities/interfaces\");\nconst _constants = require(\"../utilities/constants-angular\");\nconst query_messages_1 = require(\"./query-messages\");\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"ngx-electronyzer\");\nconst i3 = require(\"../workspace/workspace-service\");\nconst i4 = require(\"../database/database-service\");\nconst i5 = require(\"../utilities/utilities\");\nlet QueryService = /*#__PURE__*/(() => {\n  class QueryService {\n    constructor(http, _electronService, _workspaceService, _databaseService, _utilities) {\n      this.http = http;\n      this._electronService = _electronService;\n      this._workspaceService = _workspaceService;\n      this._databaseService = _databaseService;\n      this._utilities = _utilities;\n      this._http = http;\n    }\n    getQueries() {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_LOADING);\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getQueries'));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/queries').pipe((0, operators_1.map)(queries => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_LOADING_OK);\n          return queries;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    getQueriesBySchedule(sc) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SCHEDULE_LOADING(sc.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('getQueriesBySchedule', sc));\n      } else {\n        return this._http.get(this._utilities.getLocalhostURL() + '/queries?scheduleId=' + sc.id).pipe((0, operators_1.map)(queries => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SCHEDULE_LOADING_OK);\n          return queries;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SCHEDULE_LOADING_ERROR, err);\n          throw err;\n        }));\n      }\n    }\n    saveQuery(q) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SAVE(q.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('saveQuery', q));\n      } else {\n        if (q.id) {\n          return this._http.put(this._utilities.getLocalhostURL() + '/queries/' + q.id, q).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SAVE_ERROR(q.name), err);\n            throw err;\n          }));\n        } else {\n          return this._http.post(this._utilities.getLocalhostURL() + '/queries', q).pipe((0, operators_1.map)(() => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SAVE_OK);\n            return true;\n          }), (0, rxjs_1.catchError)(err => {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_SAVE_ERROR(q.name), err);\n            throw err;\n          }));\n        }\n      }\n    }\n    deleteQuery(q) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_DELETE(q.name));\n      if (this._electronService.isElectronApp) {\n        return (0, rxjs_1.of)(this._electronService.ipcRenderer.sendSync('deleteQuery', q));\n      } else {\n        return this._http.delete(this._utilities.getLocalhostURL() + '/queries/' + q.id).pipe((0, operators_1.map)(() => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_DELETE_OK);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_DELETE_ERROR(q.name), err);\n          throw err;\n        }));\n      }\n    }\n    exportQuery(sc) {\n      let queries = [];\n      let decrypt = false;\n      let query_names = [];\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT);\n      query_names = sc.queries.map(q => q.name);\n      queries = this.exportQueryFromRepository(sc);\n      if (queries.length > 0) {\n        queries = queries.filter(q => query_names.includes(q.name) ? false : true);\n        return this.saveAllQueries(sc, queries).pipe((0, operators_1.map)(res => {\n          return res;\n        }));\n      } else {\n        return this.exportQueryFromI01(sc, sc.contractType == _constants.CNST_MODALIDADE_CONTRATACAO_PLATAFORMA ? true : false).pipe((0, operators_1.switchMap)(queries => {\n          queries = queries.filter(q => query_names.includes(q.name) ? false : true);\n          return this.saveAllQueries(sc, queries).pipe((0, operators_1.map)(res => {\n            return res;\n          }));\n        }));\n      }\n    }\n    saveAllQueries(sc, queries) {\n      if (queries.length > 0) {\n        let obs_queries = queries.map(query => {\n          let q = new interfaces_1.Query();\n          q.scheduleId = sc.schedule.id;\n          q.name = query.name;\n          q.executionMode = query.executionMode;\n          q.canDecrypt = sc.contractType == _constants.CNST_MODALIDADE_CONTRATACAO_PLATAFORMA ? true : false;\n          q.query = query.query;\n          return this.saveQuery(q);\n        });\n        this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_SAVE(sc.schedule.name));\n        return (0, rxjs_1.forkJoin)(obs_queries).pipe((0, operators_1.map)(() => {\n          this._utilities.createNotification(_constants.CNST_LOGLEVEL.INFO, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_OK, null);\n          return true;\n        }), (0, rxjs_1.catchError)(err => {\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_SAVE_ERROR(sc.schedule.name));\n          throw err;\n        }));\n      } else if (this._electronService.isElectronApp) {\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.WARN, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_WARNING(sc.schedule.name));\n        return (0, rxjs_1.of)(false);\n      } else {\n        return (0, rxjs_1.of)(false);\n      }\n    }\n    exportQueryFromRepository(sc) {\n      this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_STANDARD);\n      let queries = _constants.CNST_ERP.find(erp => erp.ERP == sc.erp).Queries[sc.databaseType].filter(q => q.Modulos.includes(sc.module) || q.Modulos.length == 0);\n      if (queries.length > 0) this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_STANDARD_OK);else this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_STANDARD_WARNING);\n      return queries;\n    }\n    exportQueryFromI01(sc, decrypt) {\n      if (this._electronService.isElectronApp) {\n        this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_I01, null);\n        return (0, rxjs_1.forkJoin)([this._workspaceService.getWorkspaces(), this._databaseService.getDatabases()]).pipe((0, operators_1.map)(results => {\n          let queries = null;\n          this._utilities.writeToLog(_constants.CNST_LOGLEVEL.DEBUG, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_I01_PREPARE, null);\n          let exportWorkspace = results[0].find(w => w.id === sc.schedule.workspaceId);\n          let exportDatabase = results[1].find(db => db.id === exportWorkspace.databaseId);\n          if (exportWorkspace.erp == _constants.CNST_ERP_PROTHEUS) {\n            exportDatabase.password = this._electronService.ipcRenderer.sendSync('decrypt', exportDatabase.password);\n            let javaInput = {\n              workspace: null,\n              database: exportDatabase,\n              java: null,\n              schedule: null,\n              queries: null,\n              scripts: null\n            };\n            let params = this._electronService.ipcRenderer.sendSync('encrypt', JSON.stringify(javaInput));\n            let res = this._electronService.ipcRenderer.sendSync('exportQuery', params);\n            queries = res.message.map(q => {\n              q.scheduleId = sc.schedule.id;\n              q.canDecrypt = decrypt;\n              q.query = this._electronService.ipcRenderer.sendSync('encrypt', q.query);\n              return q;\n            });\n          } else {\n            this._utilities.writeToLog(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_I01_ERROR_NOTPROTHEUS, null);\n            this._utilities.createNotification(_constants.CNST_LOGLEVEL.ERROR, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_I01_ERROR_NOTPROTHEUS);\n            queries = [];\n          }\n          return queries;\n        }));\n      } else {\n        this._utilities.createNotification(_constants.CNST_LOGLEVEL.WARN, query_messages_1.CNST_QUERY_MESSAGES.QUERY_EXPORT_I01_WARNING);\n        return (0, rxjs_1.of)([]);\n      }\n    }\n  }\n  QueryService.ɵfac = function QueryService_Factory(t) {\n    return new (t || QueryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ElectronService), i0.ɵɵinject(i3.WorkspaceService), i0.ɵɵinject(i4.DatabaseService), i0.ɵɵinject(i5.Utilities));\n  };\n  QueryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QueryService,\n    factory: QueryService.ɵfac,\n    providedIn: 'root'\n  });\n  return QueryService;\n})();\nexports.QueryService = QueryService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}