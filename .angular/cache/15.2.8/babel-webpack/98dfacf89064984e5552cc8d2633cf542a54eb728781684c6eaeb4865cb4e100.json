{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginService = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"./session-service\");\nconst i3 = require(\"../utilities/utilities\");\nlet LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(_http, _sessionService, _utilities) {\n      this._http = _http;\n      this._sessionService = _sessionService;\n      this._utilities = _utilities;\n    }\n    doLogin(user, password, env, rememberMe) {\n      let payload = {\n        postUserLogin: {\n          login: user,\n          password: password,\n          remember: rememberMe,\n          verify_level: 2\n        }\n      };\n      // Devemos assinalar o alias que está sendo usado utilizado antes de tentar o login,\n      // para que o session service defina o servidor que devera realizar o login\n      this._sessionService.ENVIRONMENT = env;\n      let headers = this._utilities.getDefaultHeaders();\n      return this._http.post(this._sessionService.SERVER + 'gdc/account/login', payload, {\n        withCredentials: true,\n        headers: headers,\n        observe: 'response'\n      }).pipe((0, operators_1.switchMap)(res2 => {\n        this._sessionService.USER_ID = res2.body.userLogin.profile.replace('/gdc/account/profile/', '');\n        this._sessionService.TOKEN_SST = res2.body.userLogin.token;\n        return this.refreshLoginSection();\n      }), (0, operators_1.catchError)(authError => {\n        this._utilities.createNotification('ERR', authError.error.message);\n        throw authError;\n      }));\n    }\n    refreshToken() {\n      let headers = this._utilities.getDefaultHeaders();\n      headers = this._utilities.addGoodDataHeaders(headers);\n      return this._http.get(this._sessionService.SERVER + 'gdc/account/token', {\n        withCredentials: true,\n        headers: headers,\n        observe: 'response'\n      });\n    }\n    refreshLoginSection() {\n      return this.refreshToken().pipe((0, operators_1.switchMap)(res2 => {\n        this._sessionService.TOKEN_TT = res2.body.userToken.token;\n        return Promise.resolve(true);\n      }), (0, operators_1.catchError)(authError => {\n        return Promise.resolve(false);\n      }));\n    }\n  }\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionService), i0.ɵɵinject(i3.Utilities));\n  };\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();\nexports.LoginService = LoginService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}