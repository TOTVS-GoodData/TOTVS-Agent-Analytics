{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/diego/Documents/GoodData/Agent/TOTVS-Agent-Analytics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utilities = void 0;\nconst http_1 = require(\"@angular/common/http\");\nconst ng_components_1 = require(\"@po-ui/ng-components\");\nconst constants_angular_1 = require(\"../utilities/constants-angular\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"ngx-electronyzer\");\nconst i2 = require(\"../service/session-service\");\nconst i3 = require(\"@po-ui/ng-components\");\nlet Utilities = /*#__PURE__*/(() => {\n  class Utilities {\n    constructor(_electronService, _sessionService, _notificationService) {\n      this._electronService = _electronService;\n      this._sessionService = _sessionService;\n      this._notificationService = _notificationService;\n      this.debug = false;\n      this.CNST_LOCALHOST_PORT = 3000;\n    }\n    findNextId(obj) {\n      let ids = obj.map(o => {\n        return o.id;\n      }).sort((v1, v2) => {\n        if (v1 < v2) return -1;\n        if (v1 > v2) return 1;\n        return 0;\n      });\n      let start = 0;\n      let output = ids.find(id => {\n        start = start + 1;\n        return id != start;\n      });\n      if (output == undefined) start = start + 1;\n      return start;\n    }\n    getLocalhostURL() {\n      return 'http://localhost:' + this.CNST_LOCALHOST_PORT;\n    }\n    getDefaultHeaders() {\n      let headers = new http_1.HttpHeaders();\n      headers = headers.append('Accept', 'application/json');\n      headers = headers.append('Content-type', 'application/json');\n      return headers;\n    }\n    addGoodDataHeaders(headers) {\n      if (this._sessionService.TOKEN_SST != undefined) {\n        headers = headers.append('X-GDC-AuthSST', this._sessionService.TOKEN_SST);\n      }\n      if (this._sessionService.TOKEN_TT != undefined) {\n        headers = headers.append('X-GDC-AuthTT', this._sessionService.TOKEN_TT);\n      }\n      return headers;\n    }\n    writeToLog(loglevel, message, err) {\n      if (loglevel.level == constants_angular_1.CNST_LOGLEVEL.ERROR.level) {\n        console.error(loglevel.tag + ' ' + message);\n        if (err) console.error(err);\n      }\n      if (loglevel.level == constants_angular_1.CNST_LOGLEVEL.WARN.level) console.warn(loglevel.tag + ' ' + message);\n      if (loglevel.level == constants_angular_1.CNST_LOGLEVEL.INFO.level) console.info(loglevel.tag + ' ' + message);\n      if (this.debug && loglevel.level == constants_angular_1.CNST_LOGLEVEL.DEBUG.level) console.debug(loglevel.tag + ' ' + message);\n      if (this._electronService.isElectronApp) {\n        this._electronService.ipcRenderer.sendSync('writeToLog', loglevel, constants_angular_1.CNST_SYSTEMLEVEL.ANGL, message, err);\n      }\n    }\n    createNotification(type, message, errObj) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let notification = {\n          message: type.level == constants_angular_1.CNST_LOGLEVEL.ERROR.level ? 'Erro! - ' + message : message,\n          orientation: ng_components_1.PoToasterOrientation.Top,\n          duration: 4000\n        };\n        switch (type.level) {\n          case constants_angular_1.CNST_LOGLEVEL.ERROR.level:\n            _this._notificationService.error(notification);\n            break;\n          case constants_angular_1.CNST_LOGLEVEL.INFO.level:\n            _this._notificationService.success(notification);\n            break;\n          case constants_angular_1.CNST_LOGLEVEL.WARN.level:\n            _this._notificationService.warning(notification);\n            break;\n        }\n      })();\n    }\n    get debugMode() {\n      return this.debug;\n    }\n    set debugMode(_debug) {\n      this.debug = _debug;\n    }\n  }\n  Utilities.ɵfac = function Utilities_Factory(t) {\n    return new (t || Utilities)(i0.ɵɵinject(i1.ElectronService), i0.ɵɵinject(i2.SessionService), i0.ɵɵinject(i3.PoNotificationService));\n  };\n  Utilities.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Utilities,\n    factory: Utilities.ɵfac,\n    providedIn: 'root'\n  });\n  return Utilities;\n})();\nexports.Utilities = Utilities;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}