{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoodDataService = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"./http.service\");\nlet GoodDataService = /*#__PURE__*/(() => {\n  class GoodDataService {\n    constructor(_httpService) {\n      this._httpService = _httpService;\n      this.CNST_MESSAGES = {\n        GOODDATA_LOADING: 'Fazendo login na plataforma GoodData...',\n        GOODDATA_LOADING_ERROR: 'Falha no login. Por favor, verifique seu usuário / senha.',\n        GOODDATA_LOADING_PROJECTS: 'Login bem sucedido. Carregando ambientes...',\n        GOODDATA_LOADING_PROJECTS_OK: 'Ambientes carregados com sucesso!',\n        GOODDATA_LOADING_PROJECTS_ERROR: 'Não foi possível se conectar ao GoodData. Verifique sua conexão e tente novamente.',\n        GOODDATA_LOADING_PROCESSES: 'Carregando processos de ETL...',\n        GOODDATA_LOADING_PROCESSES_ERROR: 'Não foi possível se conectar ao GoodData. Verifique sua conexão e tente novamente.'\n      };\n    }\n    init(profile_id, current_project_id) {\n      return this.getProjects(profile_id).pipe((0, operators_1.mergeMap)(workspaces => {\n        this.AVAILABLE_PROJECTS = workspaces;\n        this._CURRENT_PROJECT = this.AVAILABLE_PROJECTS.find(w => {\n          return w.id === current_project_id;\n        });\n        if (this._CURRENT_PROJECT != undefined) {\n          return this.updateProjectTree().pipe((0, operators_1.map)(res => {\n            return res;\n          }));\n        } else {\n          return Promise.resolve(true);\n        }\n      }));\n    }\n    updateProjectTree() {\n      return this._CURRENT_PROJECT.ob_processes.pipe((0, operators_1.switchMap)(p => {\n        this._CURRENT_PROJECT.processes = p;\n        return Promise.resolve(true);\n      }));\n    }\n    getProjects(profile_id) {\n      let url = 'gdc/account/profile/' + profile_id + '/projects';\n      return this._httpService.get(url, {\n        withCredentials: true\n      }).pipe((0, operators_1.map)(res => {\n        let projects = res.projects.map(project => {\n          let id = project.project.links.self.replace('/gdc/projects/', '');\n          return {\n            id: id,\n            name: project.project.meta.title,\n            description: project.project.meta.summary,\n            ob_processes: this.getProcesses(id),\n            processes: []\n          };\n        });\n        return projects;\n      }));\n    }\n    getProcesses(project_id) {\n      let url = 'gdc/projects/' + project_id + '/dataload/processes';\n      return this._httpService.get(url, {\n        withCredentials: true\n      }).pipe((0, operators_1.map)(res => {\n        let processes = res.processes.items.map(p => {\n          return {\n            id: p.process.links.self.replace('/gdc/projects/' + project_id + '/dataload/processes/', ''),\n            url: p.process.links.self,\n            name: p.process.name,\n            graphs: p.process.graphs.map(g => {\n              return g.replace(p.process.name, '');\n            }),\n            type: p.process.type\n          };\n        });\n        return processes;\n      }));\n    }\n    setCurrentProject(id) {\n      this._CURRENT_PROJECT = this._AVAILABLE_PROJECTS.find(w => {\n        return w.id === id;\n      });\n      return this.updateProjectTree().pipe((0, operators_1.map)(res => {\n        return res;\n      }));\n    }\n    get CURRENT_PROJECT() {\n      return this._CURRENT_PROJECT;\n    }\n    set CURRENT_PROJECT(current_project) {\n      this._CURRENT_PROJECT = current_project;\n    }\n    get AVAILABLE_PROJECTS() {\n      return this._AVAILABLE_PROJECTS;\n    }\n    set AVAILABLE_PROJECTS(availableProjects) {\n      this._AVAILABLE_PROJECTS = availableProjects;\n    }\n  }\n  GoodDataService.ɵfac = function GoodDataService_Factory(t) {\n    return new (t || GoodDataService)(i0.ɵɵinject(i1.HttpService));\n  };\n  GoodDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GoodDataService,\n    factory: GoodDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return GoodDataService;\n})();\nexports.GoodDataService = GoodDataService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}